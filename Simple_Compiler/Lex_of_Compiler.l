/* Definition section */
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
enum T {ITN,FP,VOI,ERR};
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
extern int yylineno;
%}

/* Define regular expression label */
newline	    [\n]
digit	    [0-9]
letter	    [a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id	    {letter}+({letter}|{digit})*
whitespace  " "
tab	    "	"


/* Rules section */
%%

 /* Arithmetic */
"+" 	{ return ADD; }
"-" 	{ return SUB; }
"*" 	{ return MUL; }
"/" 	{ return DIV; }
"%"     { return MOD; }
"++"    { return INCREMENT; }
"--"    { return DECREMENT; }

 /* Relational */
">"	{ return GREATER_THAN; }
"<"	{ return LESS_THAN; }
">="	{ return GREATER_EQUAL; }
"<="	{ return LESS_EQUAL; }
"=="	{ return EQUAL; }
"!="	{ return NOTEQUAL; }

 /* Assignment */
"="	{ return ASSIGN; }
"+="	{ return ADD_ASSIGN; }
"-="	{ return SUB_ASSIGN; }
"*="	{ return MUL_ASSIGN; }
"/="	{ return DIV_ASSIGN; }
"%="	{ return MOD_ASSIGN; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR; }
"!"	{ return NOT; }

 /* Delimiters */
"("	{ return LB; }
")"	{ return RB; }
"{"	{ return LCB; }
"}"	{ return RCB; }

 /* Print Keywords */	
"print"		{ return PRINT; }
"println"	{ return PRINTLN; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
"for"		{ return FOR; }

 /* Declaration Keywords */
"var"		{ yylval.s_num=malloc(sizeof(char)*(yyleng+1));strcpy(yylval.s_num,yytext); return VAR; }
"void"		{ yylval.n_num.type=VOI; return VOID; }
"int"		{ yylval.n_num.type=ITN; return INT_TYPE; }
"float32"	{ yylval.n_num.type=FP; return FLOAT32_TYPE; }

 /* String Constant */
"\"".+"\""	{ yylval.s_num=malloc(sizeof(char)*(yyleng+1)); strcpy(yylval.s_num,yytext);return STRING;}

 /* Number Constant */
{integer}	{ sscanf(yytext,"%d",&yylval.n_num.i_num);return INTEGER; }
{double}	{ sscanf(yytext,"%lf",&yylval.n_num.f_num);return FLOAT32;}


 /* C type Comment */
"/*"(.+\n?)*"*/"    { 	char* t = strtok(yytext,"\n");
			while( t != NULL ) {
				yylineno++;
				t=strtok(NULL, "\n");
			}
			yylineno--;
		    }


 /* C++ type Comment */
"//".+\n		{ ++yylineno;}



 /* Variable ID */
{id}       { yylval.s_num=malloc(sizeof(char)*(yyleng+1)); strcpy(yylval.s_num,yytext);return ID; }


 /* others */

[\n]	    		{ yylineno++;return NEWLINE; }
[ \t]	    		{ ; } /* Ignore */
[^; \t]     		{ ; } /* Ignore other charactor sets */
<<EOF>>     		{ yyterminate(); }


%%

int yywrap()
{
    return 1;
}
